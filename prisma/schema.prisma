// Schéma de base de données Prisma pour Tennis String Advisor
// Modèle moderne avec authentification, premium membership et données tennis

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================
// AUTHENTIFICATION
// =====================

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // Pour l'auth par credentials
  role          Role      @default(USER)
  
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLoginAt   DateTime? @map("last_login_at")

  // Relations
  accounts      Account[]
  sessions      Session[]
  subscription  Subscription[]
  reviews       Review[]
  favorites     Favorite[]
  comparisons   Comparison[]
  userPreferences UserPreferences?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Role {
  USER
  PREMIUM
  ADMIN
  MODERATOR
}

// =====================
// SYSTÈME PREMIUM
// =====================

model SubscriptionPlan {
  id            String   @id @default(cuid())
  name          String   @unique // "Premium Monthly", "Premium Yearly"
  description   String
  price         Decimal  @db.Decimal(10, 2)
  currency      String   @default("USD")
  interval      String   // "month", "year"
  features      Json     // Liste des fonctionnalités
  stripePriceId String?  @unique @map("stripe_price_id")
  
  active        Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id                String              @id @default(cuid())
  userId            String              @map("user_id")
  planId            String              @map("plan_id")
  stripeSubscriptionId String?          @unique @map("stripe_subscription_id")
  stripeCustomerId  String?             @map("stripe_customer_id")
  
  status            SubscriptionStatus  @default(PENDING)
  currentPeriodStart DateTime           @map("current_period_start")
  currentPeriodEnd   DateTime           @map("current_period_end")
  expiresAt         DateTime           @map("expires_at")
  cancelAtPeriodEnd Boolean            @default(false) @map("cancel_at_period_end")
  
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  user User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan SubscriptionPlan @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  CANCELED
  EXPIRED
  PAST_DUE
}

// =====================
// DONNÉES TENNIS
// =====================

model Brand {
  id        String   @id @default(cuid())
  name      String   @unique
  logo      String?
  website   String?
  description String? @db.Text
  country   String?
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  racquets  Racquet[]
  strings   TennisString[]

  @@map("brands")
}

model Racquet {
  id          String  @id @default(cuid())
  name        String
  brandId     String  @map("brand_id")
  model       String?
  year        Int?
  
  // Spécifications techniques
  weight      Float?  // grammes
  balance     Float?  // points (head light/heavy)
  length      Float?  // pouces
  headSize    Int?    @map("head_size") // cm²
  stringPattern String? @map("string_pattern") // "16x19"
  swingWeight Int?    @map("swing_weight")
  stiffness   Int?    // RA
  beamWidth   String? @map("beam_width") // "23-26-22mm"
  
  // Informations commerciales
  price       Decimal? @db.Decimal(10, 2)
  currency    String?  @default("USD")
  availability String? // "In Stock", "Discontinued"
  images      String[] // URLs des images
  description String?  @db.Text
  
  // Métadonnées
  scrapedFrom String?  @map("scraped_from")
  scrapedAt   DateTime? @map("scraped_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  brand       Brand      @relation(fields: [brandId], references: [id])
  reviews     Review[]
  favorites   Favorite[]
  comparisons ComparisonItem[]

  @@map("racquets")
}

model TennisString {
  id          String      @id @default(cuid())
  name        String
  brandId     String      @map("brand_id")
  
  // Spécifications techniques
  material    StringMaterial
  construction StringConstruction?
  gauge       String?     // "16", "17", "18"
  gaugeInMm   Float?      @map("gauge_in_mm")
  color       String?
  texture     StringTexture?
  tension     String?     // "50-70 lbs"
  
  // Caractéristiques de jeu
  power       Int?        // 1-10
  control     Int?        // 1-10
  comfort     Int?        // 1-10
  durability  Int?        // 1-10
  spin        Int?        // 1-10
  
  // Informations commerciales
  price       Decimal?    @db.Decimal(10, 2)
  currency    String?     @default("USD")
  length      Int?        // mètres dans un set
  availability String?
  images      String[]
  description String?     @db.Text
  
  // Métadonnées
  scrapedFrom String?     @map("scraped_from")
  scrapedAt   DateTime?   @map("scraped_at")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  brand       Brand       @relation(fields: [brandId], references: [id])
  reviews     Review[]
  favorites   Favorite[]
  comparisons ComparisonItem[]

  @@map("tennis_strings")
}

enum StringMaterial {
  NATURAL_GUT
  NYLON
  POLYESTER
  MULTIFILAMENT
  SYNTHETIC_GUT
  HYBRID
  KEVLAR
  COPOLY
}

enum StringConstruction {
  SOLID_CORE
  MULTIFILAMENT
  TEXTURED
  TWISTED
  BRAIDED
}

enum StringTexture {
  SMOOTH
  TEXTURED
  ROUGH
  SHAPED
}

// =====================
// CONTENU UTILISATEUR
// =====================

model Review {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  racquetId String?  @map("racquet_id")
  stringId  String?  @map("string_id")
  
  rating    Int      // 1-5 étoiles
  title     String
  content   String   @db.Text
  pros      String[] // Points positifs
  cons      String[] // Points négatifs
  
  // Contexte du joueur
  playerLevel String? @map("player_level") // "Beginner", "Intermediate", "Advanced"
  playStyle   String? @map("play_style")   // "Aggressive", "All-court", "Defensive"
  
  verified    Boolean  @default(false) // Review vérifiée
  helpful     Int      @default(0)     // Nombre de "helpful"
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  racquet Racquet?     @relation(fields: [racquetId], references: [id], onDelete: Cascade)
  string  TennisString? @relation(fields: [stringId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  racquetId String?  @map("racquet_id")
  stringId  String?  @map("string_id")
  
  createdAt DateTime @default(now()) @map("created_at")

  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  racquet Racquet?     @relation(fields: [racquetId], references: [id], onDelete: Cascade)
  string  TennisString? @relation(fields: [stringId], references: [id], onDelete: Cascade)

  @@unique([userId, racquetId])
  @@unique([userId, stringId])
  @@map("favorites")
}

model Comparison {
  id        String           @id @default(cuid())
  userId    String           @map("user_id")
  name      String
  
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  user  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  items ComparisonItem[]

  @@map("comparisons")
}

model ComparisonItem {
  id           String @id @default(cuid())
  comparisonId String @map("comparison_id")
  racquetId    String? @map("racquet_id")
  stringId     String? @map("string_id")
  
  comparison Comparison   @relation(fields: [comparisonId], references: [id], onDelete: Cascade)
  racquet    Racquet?     @relation(fields: [racquetId], references: [id], onDelete: Cascade)
  string     TennisString? @relation(fields: [stringId], references: [id], onDelete: Cascade)

  @@map("comparison_items")
}

model UserPreferences {
  id       String @id @default(cuid())
  userId   String @unique @map("user_id")
  
  // Préférences de jeu
  playerLevel    String? @map("player_level")
  playStyle      String? @map("play_style")
  dominantHand   String? @map("dominant_hand")
  preferredTension String? @map("preferred_tension")
  
  // Préférences d'équipement
  preferredBrands String[] @map("preferred_brands")
  budgetRange     Json?    @map("budget_range") // {min: 100, max: 300}
  
  // Notifications
  emailNotifications    Boolean @default(true) @map("email_notifications")
  priceAlerts          Boolean @default(false) @map("price_alerts")
  newProductAlerts     Boolean @default(false) @map("new_product_alerts")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// =====================
// ANALYTICS
// =====================

model PageView {
  id        String   @id @default(cuid())
  path      String
  userAgent String?  @map("user_agent")
  ip        String?
  country   String?
  referer   String?
  
  createdAt DateTime @default(now()) @map("created_at")

  @@map("page_views")
}

model SearchQuery {
  id        String   @id @default(cuid())
  query     String
  results   Int      @default(0)
  userId    String?  @map("user_id")
  
  createdAt DateTime @default(now()) @map("created_at")

  @@map("search_queries")
}